{
  "name": "Elastic Webserver on AWS",
  "tagline": "15618 Final Project",
  "body": "### Summary\r\nI am going to design and implement an Elastic Webserver Platform using AWS that allows you to specify scheduling and scaling policies programmatically utilizing characteristics of the incoming requests and knowledge of the type of workload. I will them attempt to beet Amazon's Elastic Load Balancer(ELB)[1] and Auto Scale Groups[2] performance at the same cost/hour for a variety of workload/cost combinations.\r\n\r\n### Background\r\nAmazon offers an existing solution to create an Elastic Webserver on AWS using the Elastic Load Balancer and Auto Scale Group combination which fulfill some of the requirements of an Elastic Webserver like Availability and Elasticity however this approach has several limitations for real workloads which I look to address with my solution. Some of the limitations are:-\r\n* The ELB uses a naive Round Robin Load Balancing approach to balance incoming requests among various servers however this approach is inefficient when the workload associated with each request is imbalanced which is usually the case for real world loads.\r\n* Auto Scale Group can scale based upon only a limited set of Cloud Watch Metrics[3].\r\n* Auto Scale Group only allows Homogeneous scaling out of resources. We can achieve better performance for the same cost if we scale out heterogeneously utilizing the knowledge of the type of workload which has increased(For e.g. launching a C series compute optimized instance may be more cost effective than launching multiple smaller instances).\r\n\r\n### The Challenge\r\n* An Elastic Webserver must provide Availability and Elasticity. I would need to keep track of worker node health to mark workers as dead or alive. Also the load balancer is a bottleneck in the system and there is no way to scale a EC2 instance vertically on AWS in real-time. I will have to figure out a solution for this.\r\n* Beating the performance at lower cost points will be difficult as the ELB is cheap at $0.025 an hour and a additional $0.8 for every 100GB through the load balancer whereas I would have to run the load balancer on an EC2 instance and even reasonably low power instances are much more expensive than the ELB. I will have to make up the cost in scheduling and scaling efficiency.\r\n* I may face several hurdles along the way due to limitations of the AWS API and would have to find workarounds for those.\r\n* Maintaining worker state if multiple load balancers are deployed to mitigate a SPOF.\r\n\r\n### Resources\r\nThe entire platform will be built on top of Amazon EC2 and will be built using AWS Java API. I plan on using the Undertow Web Framework[4] for the underlying Load Balancers and Web Server's HTTP components. I will look into using JMeter[5] as the load generator.\r\n\r\n### Goals and Deliverables\r\n#### Must Haves\r\n* Framework for scheduling and scaling based on desired algorithm with access to different worker state metrics. \r\n* Horizontal scaling and Fault tolerance of Worker nodes\r\n* Cost/Performance ratio competitive with ELB and ASG for the tested configurations with the implemented scheduling algorithms.\r\n* Detailed analysis of the results explaining/demonstrating how work distribution and heterogeneity helped in achieving the performance goals.\r\n\r\n#### Should Haves\r\n* Vertical scaling of the Load Balancer.\r\n* Easy to use configuration file to get setup and implement a solution based on the framework on AWS.\r\n\r\n### Platform Choice\r\nI plan to use Java and use Java Web Framework for this as the AWS Java SDK is the most feature rich and stable API and Java is a popular language for Web Development and unlike PHP allows to explore the underlying parallelism. Amazon AWS is the cloud platform of choice for a majority of Salable Web Apps which require Platform as a Service and hence I chose AWS.\r\n\r\n### Schedule\r\n#### Week April 2-8\r\n* Decide on all the libraries/frameworks to be used and read about them\r\n* Build a basic Proxy with fixed set of Workers along with porting various workloads from assignment and writing more if need arises.\r\n\r\n#### Week April 9-15\r\n* Build basic Autoscaling API on top of AWS and get have the API get access to all the worker metrics.\r\n* Build API to perform health checks on workers and mark/unmark unhealthy/healthy instances.\r\n* Build various ELB and ASG configurations and run tests to get the baseline performance/cost comparisons.\r\n\r\n#### Week April 16-22\r\n* Work on scheduling and scaling stratergies and optimize performance.\r\n\r\n#### Week April 23-29\r\n* Write additional test traces and workloads.\r\n* Further optimize performance\r\n\r\n#### Week April 30-Competition\r\n* Finish any pending work and additional features.\r\n* Finish Final write-up and Presentation.\r\n\r\n### References\r\n1. [Elastic Load Balancer](https://aws.amazon.com/elasticloadbalancing/)\r\n2. [Auto Scale Group](https://aws.amazon.com/autoscaling/)\r\n3. [Amazon Cloudwatch](https://aws.amazon.com/cloudwatch/)\r\n4. [Undertow](http://undertow.io/)\r\n5. [jMeter](http://jmeter.apache.org/)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}