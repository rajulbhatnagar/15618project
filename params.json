{
  "name": "Elastic Webserver on AWS",
  "tagline": "15618 Final Project",
  "body": "### Summary\r\nI am going to design and implement an Elastic Webserver Platform using AWS that allows you to specify scheduling and scaling policies programmatically utilizing characteristics of the incoming requests and knowledge of the type of workload. I will them attempt to beet Amazon's Elastic Load Balancer(ELB)[1] and Auto Scale Groups[2] performance at the same cost/hour for a variety of workload/cost combinations.\r\n\r\n### Background\r\nAmazon offers an existing solution to create an Elastic Webserver on AWS using the Elastic Load Balancer and Auto Scale Group combination which fulfill some of the requirements of an Elastic Webserver like Availability and Elasticity however this approach has several limitations for real workloads which I look to address with my solution. Some of the limitations are:-\r\n* The ELB uses a naive Round Robin Load Balancing approach to balance incoming requests among various servers however this approach is inefficient when the workload associated with each request is imbalanced which is usually the case for real world loads.\r\n* Auto Scale Group can scale based upon only a limited set of Cloud Watch Metrics[3].\r\n* Auto Scale Group only allows Homogeneous scaling out of resources. We can achieve better performance for the same cost if we scale out heterogeneously utilizing the knowledge of the type of workload which has increased(For e.g. launching a C series compute optimized instance may be more cost effective than launching multiple smaller instances).\r\n\r\n### The Challenge\r\n* An Elastic Webserver must provide Availability and Elasticity. I would need to keep track of worker node health to mark workers as dead or alive. Also the load balancer is a bottleneck in the system and there is no way to scale a EC2 instance vertically on AWS in real-time. I will have to figure out a solution for this.\r\n* Beating the performance at lower cost points will be difficult as the ELB is cheap at $0.025 an hour and a additional $0.8 for every 100GB through the load balancer whereas I would have to run the load balancer on an EC2 instance and even reasonably low power instances are much more expensive than the ELB. I will have to make up the cost in scheduling and scaling efficiency.\r\n* I may face several hurdles along the way due to limitations of the AWS API and would have to find workarounds for those.\r\n* Maintaining worker state if multiple load balancers are deployed to mitigate a SPOF.\r\n\r\n### Resources\r\n\r\n\r\n### Goals and Deliverables\r\n\r\n### Platform Choice\r\n\r\n### Schedule\r\n\r\n### References\r\n1.\r\n2.\r\n3.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}